import React, {useEffect, useLayoutEffect, useState} from "react"
import "./App.css"
import {
    Backdrop,
    Box,
    Button,
    Dialog,
    FormControl, IconButton,
    ImageList,
    ImageListItem,
    InputLabel,
    List,
    ListItemText,
    MenuItem,
    Slider,
    Stack,
    TextField,
    Tooltip,
    Typography
} from "@mui/material"
import Grid from "@mui/material/Unstable_Grid2"
import LoadingSpinner from "./LoadingSpinner"
import {Info, Brush} from "@mui/icons-material"
import {MaskEditor} from "./MaskEditor.jsx"
import "./Imagen2.css"

const RaiReason = ({code}) =>  <Stack
    direction="row"
    justifyContent="center"
    alignItems="center"
    sx={{ width: 1, height: "100%" }}
>
    <Typography>Blocked. Reason code: {code}.</Typography>
</Stack>

const Predictions = ({predictions, handlePredictionOpen}) => {
    if (predictions.length <= 0) return
    return (
        <ImageList cols={2} sx={{mt:"4px", mb:0}}>
            {predictions.map((prediction, i) => {
                const dataUrl = `data:${prediction.mimeType};base64,${prediction.bytesBase64Encoded}`
                if (prediction.bytesBase64Encoded !== undefined) return (
                    <ImageListItem  key={i}>
                        <img src={dataUrl}
                             style={{maxWidth: "100%"}}
                             onClick={() => handlePredictionOpen(prediction)}
                             alt={`Generated by Imagen2: "${prompt}"`}
                        />
                    </ImageListItem>
                )

                if (prediction.raiFilteredReason !== undefined) return (
                    <ImageListItem sx={{aspectRatio: "1 / 1"}}   key={i}>
                        <RaiReason code={prediction.raiFilteredReason}/>
                    </ImageListItem>
                )
            })}
        </ImageList>
    )
}

const PredictionEditDialog = ({prediction, handleClose}) => {
    if (prediction === undefined
        || prediction.mimeType === undefined
        || prediction.bytesBase64Encoded === undefined) return

    if (!Boolean(prediction)) return

    const [hasMask, setHasMask] = useState(false)
    const [mask, setMask] = useState("")
    const [brushSize, setBrushSize] = useState(50)

    const canvas = React.useRef()

    const dataUrl = `data:${prediction.mimeType};base64,${prediction.bytesBase64Encoded}`

    return (<Dialog open={Boolean(prediction)}
            fullScreen
            onClick={() => handleClose()}
            PaperProps={{sx: {backgroundColor: 'transparent'}}}
    >
        <div className="bounds-outer">
            <div className="bounds-inner">
                <div className="a" onClick={(e) => e.stopPropagation()}>
                    {!hasMask && <img src={dataUrl} className="imageOpen"/>}
                    {hasMask && <MaskEditor src={dataUrl} brushSize={brushSize} canvasRef={canvas}/>}
                    <IconButton className="floatButton" sx={{position: "absolute"}} size="large" color="primary" onClick={()=>setHasMask(!hasMask)}><Info/></IconButton>
                </div>
            </div>
        </div>
    </Dialog>)
}

function Imagen2() {
    const [history, setHistory] = useState([])
    const [loading, setLoading] = useState(false)
    const [prompt, setPrompt] = useState("")
    const [negativePrompt, setNegativePrompt] = useState("")
    const [guidanceScale, setGuidanceScale] = useState(10)
    const [language, setLanguage] = useState("auto")
    const [error, setError] = useState("")
    const [predictionOpen, setPredictionOpen] = useState("")

    const generateImages = async () => {
        if(prompt === "") return
        try {
            const np = negativePrompt.length > 0 ? negativePrompt : undefined
            const body = {
                instances: [{prompt}],
                parameters: {
                    negativePrompt: np,
                    guidanceScale,
                    language,
                    sampleCount: 4,
                    includeRaiReason: true,
                    includeSafetyAttributes: true,
                }
            }
            const res = await fetch("/api/generate-image", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(body)
            })
            if (!res.ok) throw new Error(await res.text())
            history.push(await res.json())
            setHistory([...history])
            setLoading(false)
        }
        catch(err){
            setError(err.message)
            setHistory([])
            setLoading(false)
        }
    }

    const onFormSubmit = async (e) => {
        e.preventDefault()
        setLoading(true)
        setError("")
        return generateImages()
    }

    const guidanceTooltip = () => {
        return (
            <>
                <Typography variant="h6">How strong do you want the prompt(s) to be?</Typography>
                <Typography>
                    A larger number will make an image that is closer to your prompt(s),
                    a smaller number will result in a more creative image.
                </Typography>
                <Typography variant="h6">Suggested values</Typography>
                <List>
                    <ListItemText>0-9: low strength</ListItemText>
                    <ListItemText>10-20: medium strength</ListItemText>
                    <ListItemText>21 or higher: high strength</ListItemText>
                </List>
            </>
        )
    }

    const guidanceScaleColor = (g) => {
        if (g <= 9) return "success"
        else if (g <= 20 ) return "warning"
        else return "error"
    }

    const guidanceScaleSuffix = (g) => {
        if (g <= 9) return `${g} (low)`
        else if (g <= 20 ) return `${g} (medium)`
        else return `${g} (high)`
    }

    const handlePredictionOpen = (prediction) => {
        setPredictionOpen(prediction)
    }

    return (
        <form>
        <Grid container spacing={2}>
            <Grid xs={12} md={10}>
                <TextField label="Enter your prompt here"
                           variant="outlined"
                           fullWidth
                           value={prompt}
                           error={prompt.length === 0}
                           onChange={e => setPrompt(e.target.value)}
                           helperText={prompt.length === 0 ? "Required" : undefined}
                />
            </Grid>

            <Grid xs={12} md={2}>
                <TextField label="Language"
                           select
                           fullWidth
                           value={language}
                           onChange={e => setLanguage(e.target.value)}
                >
                    <MenuItem value="auto">(auto)</MenuItem>
                    <MenuItem value="en">English</MenuItem>
                    <MenuItem value="es">Spanish</MenuItem>
                    <MenuItem value="hi">Hindi</MenuItem>
                    <MenuItem value="ja">Japanese</MenuItem>
                    <MenuItem value="ko">Korean</MenuItem>
                    <MenuItem value="pt">Portuguese</MenuItem>
                    <MenuItem value="zh-TW">Chinese (traditional)</MenuItem>
                    <MenuItem value="zh-CN">Chinese (simplified)</MenuItem>
                </TextField>
            </Grid>

            <Grid xs={12} md={10}>
                <TextField label="Negative prompt (optional)"
                           variant="outlined"
                           fullWidth
                           value={negativePrompt}
                           onChange={e => setNegativePrompt(e.target.value)}
                />
            </Grid>

            <Grid xs={12}>
                <Stack spacing={2}
                       direction="row"
                       sx={{ mb: 1 }}
                       alignItems="center">
                    <FormControl fullWidth>
                        <InputLabel id="strength-slider">Prompt strength</InputLabel>
                        <Slider min={0}
                                max={50}
                                value={guidanceScale}
                                aria-labelledby="strength-slider"
                                valueLabelDisplay="auto"
                                onChange={e => setGuidanceScale(e.target.value)}
                                color={guidanceScaleColor(guidanceScale)}
                                getAriaValueText={guidanceScaleSuffix}
                                valueLabelFormat={guidanceScaleSuffix}
                        />
                    </FormControl>
                     <Tooltip title={guidanceTooltip()}><Info/></Tooltip>
                </Stack>
            </Grid>

            <Grid xs={12} md={4}>
                <Button onClick={onFormSubmit}
                        type="submit"
                        size="large"
                        variant="contained"
                        disabled={prompt.length <= 0 || loading}
                        endIcon={loading?<LoadingSpinner/>:<Brush/>}
                        fullWidth
                >
                    Generate Images
                </Button>
            </Grid>

            <Grid xs={12} spacing={0}>
                {history.map((predictions, i) => <Predictions key={i} {...{predictions, handlePredictionOpen}}/>)}
                <PredictionEditDialog prediction={predictionOpen} handleClose={()=>setPredictionOpen("")}/>
            </Grid>

            <Grid xs={12}>
                {error.length > 0 && !loading &&
                    <Typography sx={{whiteSpace: 'pre-line', fontFamily: 'Monospace', color: 'error.main'}}>
                        {error}
                    </Typography>
                }
            </Grid>
        </Grid>
        </form>
    )
}

export default Imagen2
