import {useState} from "react"
import "./App.css"
import {
  Button,
  FormControl,
  ImageList,
  ImageListItem,
  InputLabel,
  Link,
  List,
  ListItemText,
  MenuItem,
  Slider,
  Stack,
  TextField,
  Tooltip,
  Typography
} from "@mui/material"
import Grid from "@mui/material/Unstable_Grid2"
import LoadingSpinner from "./LoadingSpinner"
import {Brush, Info} from "@mui/icons-material"
import "./Imagen2.css"
import PropTypes from "prop-types"
import {ImageEditDialog} from "./ImageEditDialog.jsx";

const RaiReason = ({code}) =>  <Stack
  direction="row"
  justifyContent="center"
  alignItems="center"
  sx={{ width: 1, height: "100%" }}
>
  <Typography>Blocked. Reason code: {code}.</Typography>
</Stack>
RaiReason.propTypes = {
  code: PropTypes.string,
}

const Predictions = ({predictions, handlePredictionOpen}) => {
  if (predictions.length <= 0) return
  return (
    <ImageList cols={2} sx={{mt:"4px", mb:0}}>
      {predictions.map((prediction, i) => {
        const dataUrl = `data:${prediction.mimeType};base64,${prediction.bytesBase64Encoded}`
        if (prediction.bytesBase64Encoded !== undefined) return (
          <ImageListItem key={i}>
            <img src={dataUrl}
                 style={{maxWidth: "100%"}}
                 onClick={() => handlePredictionOpen(prediction)}
                 alt={`Generated by Imagen2: "${prompt}"`}
            />
          </ImageListItem>
        )

        if (prediction.raiFilteredReason !== undefined) return (
          <ImageListItem sx={{aspectRatio: "1 / 1"}}   key={i}>
            <RaiReason code={prediction.raiFilteredReason}/>
          </ImageListItem>
        )
      })}
    </ImageList>
  )
}
Predictions.propTypes = {
  predictions: PropTypes.array,
  handlePredictionOpen: PropTypes.func,
}

function Imagen2() {
  const [history, setHistory] = useState([])
  const [loading, setLoading] = useState(false)
  const [prompt, setPrompt] = useState("")
  const [negativePrompt, setNegativePrompt] = useState("")
  const [guidanceScale, setGuidanceScale] = useState(60)
  const [language, setLanguage] = useState("auto")
  const [error, setError] = useState("")
  const [predictionOpen, setPredictionOpen] = useState("")

  const callApi = async (body) => {
    const res = await fetch("/api/generate-image", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(body)
    })
    if (!res.ok) throw new Error(await res.text())
    history.unshift(await res.json())
    setHistory([...history])
    setLoading(false)
    window.scroll({
      top: 0,
      left: 0,
      behavior: 'smooth'
    })
  }

  const generateImages = async () => {
    if(prompt === "") return
    try {
      const np = negativePrompt.length > 0 ? negativePrompt : undefined
      const body = {
        instances: [{prompt}],
        parameters: {
          negativePrompt: np,
          guidanceScale,
          language,
          sampleCount: 4,
          includeRaiReason: true,
          includeSafetyAttributes: true,
          personGeneration: "allow_adult",
          safetySetting: "block_most",
        }
      }
      await callApi(body)
    }
    catch(err){
      setError(err.message)
      setHistory([])
      setLoading(false)
    }
  }

  const handleEdit = async ({baseImage, editMode, maskType, maskClasses, editPrompt, editNegativePrompt, maskDataUrl}) => {
    setPredictionOpen(false)
    setLoading(true)
    setError("")
    window.scroll({
      top: 0,
      left: 0,
      behavior: 'smooth'
    })

    const mask = !maskDataUrl ? undefined : {image: {
        mimeType: maskDataUrl.split(";")[0].split(":")[1],
        bytesBase64Encoded: maskDataUrl.split(",")[1]
      }}

    try {
      const np = editNegativePrompt.length > 0 ? editNegativePrompt : undefined
      const body = {
        instances: [{
          prompt: editPrompt,
          image: {
            bytesBase64Encoded: baseImage.bytesBase64Encoded,
            mimeType: baseImage.mimeType
          },
        }],
        parameters: {
          negativePrompt: np,
          guidanceScale,
          language,
          sampleCount: 4,
          includeRaiReason: true,
          includeSafetyAttributes: true,
          disablePersonFace: false,
          disableChild: false,
          safetySetting: "block_most",
          personGeneration: "allow_adult",
          editConfig: {
            editMode,
            guidanceScale,
          }
        }
      }
      if(mask && maskType === "painted") body.instances[0].mask = mask
      if(maskType !== "painted") {
        body.parameters.editConfig.maskMode = {
          maskType,
        }
        if (maskClasses && maskType === "semantic") {
          body.parameters.editConfig.maskMode.classes = maskClasses.map(c => c.key)
        }
      }
      console.log(body)
      await callApi(body)
    }
    catch(err){
      setError(err.message)
      setHistory([])
      setLoading(false)
    }
  }

  const onFormSubmit = async (e) => {
    e.preventDefault()
    setLoading(true)
    setError("")
    return generateImages()
  }

  const guidanceTooltip = () => {
    return (
      <>
        <Typography variant="h6">How strong do you want the prompt(s) to be?</Typography>
        <Typography>
          A larger number will make an image that is closer to your prompt(s),
          a smaller number will result in a more creative image.
        </Typography>
        <Typography variant="h6">Suggested values</Typography>
        <List>
          <ListItemText>0-9: low strength</ListItemText>
          <ListItemText>10-20: medium strength</ListItemText>
          <ListItemText>21 or higher: high strength</ListItemText>
        </List>
      </>
    )
  }

  const guidanceScaleColor = (g) => {
    if (g <= 120) return "success"
    else if (g <= 250 ) return "warning"
    else return "error"
  }

  const guidanceScaleSuffix = (g) => {
    if (g <= 120) return `${g} (low)`
    else if (g <= 250 ) return `${g} (medium)`
    else return `${g} (high)`
  }

  const handlePredictionOpen = (prediction) => {
    setPredictionOpen(prediction)
  }

  return (
    <form>
      <Grid container spacing={2}>
        <Grid xs={12} md={10}>
          <TextField label="Enter your prompt here"
                     variant="outlined"
                     fullWidth
                     value={prompt}
                     error={prompt.length === 0}
                     onChange={e => setPrompt(e.target.value)}
                     helperText={prompt.length === 0 ? "Required" : undefined}
          />
        </Grid>

        <Grid xs={12} md={2}>
          <TextField label="Language"
                     select
                     fullWidth
                     value={language}
                     onChange={e => setLanguage(e.target.value)}
          >
            <MenuItem value="auto">(auto)</MenuItem>
            <MenuItem value="en">English</MenuItem>
            <MenuItem value="es">Spanish</MenuItem>
            <MenuItem value="hi">Hindi</MenuItem>
            <MenuItem value="ja">Japanese</MenuItem>
            <MenuItem value="ko">Korean</MenuItem>
            <MenuItem value="pt">Portuguese</MenuItem>
            <MenuItem value="zh-TW">Chinese (traditional)</MenuItem>
            <MenuItem value="zh-CN">Chinese (simplified)</MenuItem>
          </TextField>
        </Grid>

        <Grid xs={12} md={10}>
          <TextField label="Negative prompt (optional)"
                     variant="outlined"
                     fullWidth
                     value={negativePrompt}
                     onChange={e => setNegativePrompt(e.target.value)}
          />
        </Grid>

        {import.meta.env.VITE_PROMPT_GUIDE_LINK &&
          <Grid xs={12} md={2}>
            <Typography>
              <Link href={import.meta.env.VITE_PROMPT_GUIDE_LINK} target="_blank">View Prompting Guide</Link>
            </Typography>
          </Grid>
        }

        <Grid xs={12}>
          <Stack spacing={2}
                 direction="row"
                 sx={{ mb: 1 }}
                 alignItems="center">
            <FormControl fullWidth>
              <InputLabel id="strength-slider">Prompt strength</InputLabel>
              <Slider min={0}
                      max={500}
                      value={guidanceScale}
                      aria-labelledby="strength-slider"
                      valueLabelDisplay="auto"
                      onChange={e => setGuidanceScale(e.target.value)}
                      color={guidanceScaleColor(guidanceScale)}
                      getAriaValueText={guidanceScaleSuffix}
                      valueLabelFormat={guidanceScaleSuffix}
              />
            </FormControl>
            <Tooltip title={guidanceTooltip()}><Info/></Tooltip>
          </Stack>
        </Grid>

        <Grid xs={12} md={4}>
          <Button onClick={onFormSubmit}
                  type="submit"
                  size="large"
                  variant="contained"
                  disabled={prompt.length <= 0 || loading}
                  endIcon={loading?<LoadingSpinner/>:<Brush/>}
                  fullWidth
          >
            Generate Images
          </Button>
        </Grid>

        <Grid xs={12} spacing={0}>
          {history.map((predictions, i) => <Predictions key={i} {...{predictions, handlePredictionOpen}}/>)}
          <ImageEditDialog prediction={predictionOpen}
                           handleClose={()=>setPredictionOpen("")}
                           handleEdit={handleEdit}
          />
        </Grid>

        <Grid xs={12}>
          {error.length > 0 && !loading &&
            <Typography sx={{whiteSpace: 'pre-line', fontFamily: 'Monospace', color: 'error.main'}}>
              {error}
            </Typography>
          }
        </Grid>
      </Grid>
    </form>
  )
}

export default Imagen2
